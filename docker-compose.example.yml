# Docker Compose for testing with example files
services:
  cubicler:
    build: .
    ports:
      - "${CUBICLER_PORT:-1503}:${CUBICLER_PORT:-1503}"
    environment:
      - CUBICLER_PORT=${CUBICLER_PORT:-1503}
      - CUBICLER_STRICT_PARAMS=${CUBICLER_STRICT_PARAMS:-false}
      
      # Timeout configurations
      - DEFAULT_CALL_TIMEOUT=${DEFAULT_CALL_TIMEOUT:-30000}
      - PROVIDER_CALL_TIMEOUT=${PROVIDER_CALL_TIMEOUT:-30000}
      - AGENT_CALL_TIMEOUT=${AGENT_CALL_TIMEOUT:-90000}
      
      # Using local example files for testing
      - CUBICLER_PROVIDERS_LIST=/app/config/providers.json
      - CUBICLER_AGENTS_LIST=/app/config/agents.json
      
      # Cache configuration
      - PROVIDERS_CACHE_ENABLED=${PROVIDERS_CACHE_ENABLED:-true}
      - PROVIDERS_CACHE_TIMEOUT=${PROVIDERS_CACHE_TIMEOUT:-600}
      - AGENTS_CACHE_ENABLED=${AGENTS_CACHE_ENABLED:-true}
      - AGENTS_CACHE_TIMEOUT=${AGENTS_CACHE_TIMEOUT:-600}
    volumes:
      # Mount the example files for testing
      - ./providers.example.json:/app/config/providers.json:ro
      - ./agents.example.json:/app/config/agents.json:ro
      # Mount logs directory
      - cubicler_logs:/app/logs
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "node", "-e", "const http = require('http'); const req = http.request('http://localhost:' + (process.env.CUBICLER_PORT || 1503) + '/health', res => process.exit(res.statusCode === 200 ? 0 : 1)); req.on('error', () => process.exit(1)); req.end();"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

volumes:
  cubicler_logs:
